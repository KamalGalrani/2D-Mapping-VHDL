--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX V" DSP_BLOCK_BALANCING="Auto" INPUT_A_IS_CONSTANT="NO" INPUT_B_IS_CONSTANT="NO" LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=9 LPM_WIDTHB=5 LPM_WIDTHP=14 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 13.1 cbx_cycloneii 2013:10:17:04:07:49:SJ cbx_lpm_add_sub 2013:10:17:04:07:49:SJ cbx_lpm_mult 2013:10:17:04:07:49:SJ cbx_mgl 2013:10:17:04:34:36:SJ cbx_padd 2013:10:17:04:07:49:SJ cbx_stratix 2013:10:17:04:07:49:SJ cbx_stratixii 2013:10:17:04:07:49:SJ cbx_util_mgl 2013:10:17:04:07:49:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 67 
SUBDESIGN mult_ees
( 
	dataa[8..0]	:	input;
	datab[4..0]	:	input;
	result[13..0]	:	output;
) 
VARIABLE
	add10_result[10..0]	:	WIRE;
	add14_result[7..0]	:	WIRE;
	add6_result[13..0]	:	WIRE;
	cs1a[2..0] : carry_sum;
	cs3a[1..0] : carry_sum;
	le2a[8..0] : lcell;
	le4a[9..0] : lcell;
	le5a[9..0] : lcell;
	sft11a[10..0] : soft;
	sft12a[10..0] : soft;
	sft13a[10..0] : soft;
	sft15a[7..0] : soft;
	sft16a[7..0] : soft;
	sft17a[7..0] : soft;
	sft7a[13..0] : soft;
	sft8a[13..0] : soft;
	sft9a[13..0] : soft;
	dataa_node[8..0]	: WIRE;
	datab_node[4..0]	: WIRE;
	final_result_node[13..0]	: WIRE;
	w122w[9..0]	: WIRE;
	w12w[8..0]	: WIRE;
	w169w	: WIRE;
	w184w	: WIRE;
	w279w[13..0]	: WIRE;
	w76w[9..0]	: WIRE;
	w7w[5..0]	: WIRE;

BEGIN 
	add10_result[] = sft11a[].out + sft12a[].out;
	add14_result[] = sft15a[].out + sft16a[].out;
	add6_result[] = sft7a[].out + sft8a[].out;
	cs1a[].cin = ( B"0", ((w7w[2..2] & cs1a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs1a[].sin = ( cs1a[1].cout, ((((((! w7w[3..3]) & w7w[2..2]) & cs1a[0].cout) # ((w7w[3..3] & w7w[2..2]) & (! cs1a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs1a[0].cout)) # ((w7w[3..3] & (! w7w[2..2])) & (! cs1a[0].cout))), w7w[1..1]);
	cs3a[].cin = ( ((w7w[2..2] & cs3a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs3a[].sin = ( ((((((! w7w[3..3]) & (! w7w[2..2])) & cs3a[0].cout) # (((! w7w[3..3]) & w7w[2..2]) & (! cs3a[0].cout))) # ((w7w[3..3] & w7w[2..2]) & (! cs3a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs3a[0].cout)), w7w[0..0]);
	le2a[].in = (((w7w[4..4] & cs1a[2].sout) # ((w7w[4..4] & (! cs1a[2].sout)) & (! dataa_node[]))) # (((! w7w[4..4]) & cs1a[2].sout) & dataa_node[]));
	le4a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs1a[0].sout) & (! cs3a[0].sout))) & (! ((((! ( dataa_node[8..8], dataa_node[])) & cs1a[0].sout) & cs3a[0].sout) # ((( dataa_node[8..8], dataa_node[]) & (! cs1a[0].sout)) & cs3a[0].sout)))));
	le5a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs1a[1].sout) & (! cs3a[1].sout))) & (! ((((! ( dataa_node[8..8], dataa_node[])) & cs1a[1].sout) & cs3a[1].sout) # ((( dataa_node[8..8], dataa_node[]) & (! cs1a[1].sout)) & cs3a[1].sout)))));
	sft11a[].in = ( w184w, ( le2a[7..7].out, ( le2a[6..6].out, ( le2a[5..5].out, ( le2a[4..4].out, ( le2a[3..3].out, ( le2a[2..2].out, ( le2a[1..1].out, ( le2a[0..0].out, ( le4a[3..2].out))))))))));
	sft12a[].in = ( w184w, ( (! w122w[9..9]), ( le5a[8..8].out, ( le5a[7..7].out, ( le5a[6..6].out, ( le5a[5..5].out, ( le5a[4..4].out, ( le5a[3..3].out, ( le5a[2..2].out, ( w184w, cs1a[1].sout))))))))));
	sft13a[].in = add10_result[];
	sft15a[].in = ( w184w, ( w169w, ( (! w76w[9..9]), ( le4a[8..8].out, ( le4a[7..7].out, ( le4a[6..6].out, ( le4a[5..4].out)))))));
	sft16a[].in = ( w184w, ( w184w, ( w169w, ( w184w, ( w184w, ( w184w, ( w184w, w7w[4..4])))))));
	sft17a[].in = add14_result[];
	sft7a[].in = ( w169w, ( (! w12w[8..8]), ( sft13a[9..9].out, ( sft13a[8..8].out, ( sft13a[7..7].out, ( sft13a[6..6].out, ( sft13a[5..5].out, ( sft13a[4..4].out, ( sft13a[3..3].out, ( sft13a[2..2].out, ( le5a[1..1].out, ( le5a[0..0].out, ( le4a[1..0].out)))))))))))));
	sft8a[].in = ( w184w, ( sft13a[10..10].out, ( sft17a[7..7].out, ( sft17a[6..6].out, ( sft17a[5..5].out, ( sft17a[4..4].out, ( sft17a[3..3].out, ( sft17a[2..2].out, ( sft17a[1..1].out, ( sft17a[0..0].out, ( sft13a[1..1].out, ( sft13a[0..0].out, ( w184w, cs1a[0].sout)))))))))))));
	sft9a[].in = add6_result[];
	dataa_node[] = ( dataa[8..0]);
	datab_node[] = ( datab[4..0]);
	final_result_node[] = ( w279w[13..0]);
	result[] = ( final_result_node[13..0]);
	w122w[] = le5a[].out;
	w12w[] = le2a[].out;
	w169w = B"1";
	w184w = B"0";
	w279w[] = ( sft9a[13..13].out, sft9a[12..12].out, sft9a[11..11].out, sft9a[10..10].out, sft9a[9..9].out, sft9a[8..8].out, sft9a[7..7].out, sft9a[6..6].out, sft9a[5..5].out, sft9a[4..4].out, sft9a[3..3].out, sft9a[2..2].out, sft9a[1..1].out, sft9a[0..0].out);
	w76w[] = le4a[].out;
	w7w[] = ( datab_node[4..4], datab_node[]);
END;
--VALID FILE
